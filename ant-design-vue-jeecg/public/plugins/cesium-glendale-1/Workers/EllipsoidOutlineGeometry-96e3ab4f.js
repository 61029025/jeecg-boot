define(["exports","./when-54c2dc71","./DeveloperError-92aa6336","./ComponentDatatype-110a3a5e","./Math-eb999bd9","./Cartesian2-454977ff","./Transforms-0e5d378c","./GeometryAttribute-44702e1a","./GeometryAttributes-4fcfcf40","./IndexDatatype-16c99db3","./GeometryOffsetAttribute-c54ab3dd"],function(i,O,t,I,T,z,L,R,N,B,S){"use strict";var f=new z.Cartesian3(1,1,1),U=Math.cos,F=Math.sin;function l(i){i=O.defaultValue(i,O.defaultValue.EMPTY_OBJECT);var t=O.defaultValue(i.radii,f),e=O.defaultValue(i.innerRadii,t),a=O.defaultValue(i.minimumClock,0),n=O.defaultValue(i.maximumClock,T.CesiumMath.TWO_PI),r=O.defaultValue(i.minimumCone,0),o=O.defaultValue(i.maximumCone,T.CesiumMath.PI),s=Math.round(O.defaultValue(i.stackPartitions,10)),m=Math.round(O.defaultValue(i.slicePartitions,8)),u=Math.round(O.defaultValue(i.subdivisions,128));this._radii=z.Cartesian3.clone(t),this._innerRadii=z.Cartesian3.clone(e),this._minimumClock=a,this._maximumClock=n,this._minimumCone=r,this._maximumCone=o,this._stackPartitions=s,this._slicePartitions=m,this._subdivisions=u,this._offsetAttribute=i.offsetAttribute,this._workerName="createEllipsoidOutlineGeometry"}l.packedLength=2*z.Cartesian3.packedLength+8,l.pack=function(i,t,e){return e=O.defaultValue(e,0),z.Cartesian3.pack(i._radii,t,e),e+=z.Cartesian3.packedLength,z.Cartesian3.pack(i._innerRadii,t,e),e+=z.Cartesian3.packedLength,t[e++]=i._minimumClock,t[e++]=i._maximumClock,t[e++]=i._minimumCone,t[e++]=i._maximumCone,t[e++]=i._stackPartitions,t[e++]=i._slicePartitions,t[e++]=i._subdivisions,t[e]=O.defaultValue(i._offsetAttribute,-1),t};var c=new z.Cartesian3,C=new z.Cartesian3,_={radii:c,innerRadii:C,minimumClock:void 0,maximumClock:void 0,minimumCone:void 0,maximumCone:void 0,stackPartitions:void 0,slicePartitions:void 0,subdivisions:void 0,offsetAttribute:void 0};l.unpack=function(i,t,e){t=O.defaultValue(t,0);var a=z.Cartesian3.unpack(i,t,c);t+=z.Cartesian3.packedLength;var n=z.Cartesian3.unpack(i,t,C);t+=z.Cartesian3.packedLength;var r=i[t++],o=i[t++],s=i[t++],m=i[t++],u=i[t++],f=i[t++],d=i[t++],t=i[t];return O.defined(e)?(e._radii=z.Cartesian3.clone(a,e._radii),e._innerRadii=z.Cartesian3.clone(n,e._innerRadii),e._minimumClock=r,e._maximumClock=o,e._minimumCone=s,e._maximumCone=m,e._stackPartitions=u,e._slicePartitions=f,e._subdivisions=d,e._offsetAttribute=-1===t?void 0:t,e):(_.minimumClock=r,_.maximumClock=o,_.minimumCone=s,_.maximumCone=m,_.stackPartitions=u,_.slicePartitions=f,_.subdivisions=d,_.offsetAttribute=-1===t?void 0:t,new l(_))},l.createGeometry=function(i){var t=i._radii;if(!(t.x<=0||t.y<=0||t.z<=0)){var e=i._innerRadii;if(!(e.x<=0||e.y<=0||e.z<=0)){var a=i._minimumClock,n=i._maximumClock,r=i._minimumCone,o=i._maximumCone,s=i._subdivisions,m=z.Ellipsoid.fromCartesian3(t),u=i._slicePartitions+1,f=i._stackPartitions+1;(u=Math.round(u*Math.abs(n-a)/T.CesiumMath.TWO_PI))<2&&(u=2),(f=Math.round(f*Math.abs(o-r)/T.CesiumMath.PI))<2&&(f=2);var d=0,l=1,c=e.x!==t.x||e.y!==t.y||e.z!==t.z,C=!1,_=!1;c&&(l=2,0<r&&(C=!0,d+=u),o<Math.PI&&(_=!0,d+=u));for(var p,h,y=s*l*(f+u),v=new Float64Array(3*y),d=2*(y+d-(u+f)*l),b=B.IndexDatatype.createTypedArray(y,d),k=0,A=new Array(f),x=new Array(f),P=0;P<f;P++)h=r+P*(o-r)/(f-1),A[P]=F(h),x[P]=U(h);var w=new Array(s),M=new Array(s);for(P=0;P<s;P++)p=a+P*(n-a)/(s-1),w[P]=F(p),M[P]=U(p);for(P=0;P<f;P++)for(g=0;g<s;g++)v[k++]=t.x*A[P]*M[g],v[k++]=t.y*A[P]*w[g],v[k++]=t.z*x[P];if(c)for(P=0;P<f;P++)for(g=0;g<s;g++)v[k++]=e.x*A[P]*M[g],v[k++]=e.y*A[P]*w[g],v[k++]=e.z*x[P];for(A.length=s,x.length=s,P=0;P<s;P++)h=r+P*(o-r)/(s-1),A[P]=F(h),x[P]=U(h);for(w.length=u,M.length=u,P=0;P<u;P++)p=a+P*(n-a)/(u-1),w[P]=F(p),M[P]=U(p);for(P=0;P<s;P++)for(g=0;g<u;g++)v[k++]=t.x*A[P]*M[g],v[k++]=t.y*A[P]*w[g],v[k++]=t.z*x[P];if(c)for(P=0;P<s;P++)for(g=0;g<u;g++)v[k++]=e.x*A[P]*M[g],v[k++]=e.y*A[P]*w[g],v[k++]=e.z*x[P];for(P=k=0;P<f*l;P++)for(var V=P*s,g=0;g<s-1;g++)b[k++]=V+g,b[k++]=V+g+1;var E=f*s*l;for(P=0;P<u;P++)for(g=0;g<s-1;g++)b[k++]=E+P+g*u,b[k++]=E+P+(g+1)*u;if(c)for(E=f*s*l+u*s,P=0;P<u;P++)for(g=0;g<s-1;g++)b[k++]=E+P+g*u,b[k++]=E+P+(g+1)*u;if(c){var G=f*s*l,D=G+s*u;if(C)for(P=0;P<u;P++)b[k++]=G+P,b[k++]=D+P;if(_)for(G+=s*u-u,D+=s*u-u,P=0;P<u;P++)b[k++]=G+P,b[k++]=D+P}c=new N.GeometryAttributes({position:new R.GeometryAttribute({componentDatatype:I.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:v})});return O.defined(i._offsetAttribute)&&(C=v.length,_=new Uint8Array(C/3),C=i._offsetAttribute===S.GeometryOffsetAttribute.NONE?0:1,S.arrayFill(_,C),c.applyOffset=new R.GeometryAttribute({componentDatatype:I.ComponentDatatype.UNSIGNED_BYTE,componentsPerAttribute:1,values:_})),new R.Geometry({attributes:c,indices:b,primitiveType:R.PrimitiveType.LINES,boundingSphere:L.BoundingSphere.fromEllipsoid(m),offsetAttribute:i._offsetAttribute})}}},i.EllipsoidOutlineGeometry=l});
